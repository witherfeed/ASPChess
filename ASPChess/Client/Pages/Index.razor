@page "/"

@using Chess = Games.Chess;


<div class="Game">
    <div class="MainBoard">
        @if (this.Promotion)
        {
            <div style="position: absolute; top: @(deltaTop+640/2-200/2)px; left: @(deltaLeft+640/2-340/2)px; width:340px; height:200px;  display: block; z-index:99;
            background-color: #b58863; border: 3px solid; border-radius: 10px; border-color: #312e2b; ">
                <p style="font-size: large; color: #312e2b"><h1 style="text-align: center;"><b>Choose figure</b></h1></p>
                <div style="text-align: center;">
                    <img @onclick="AddQ" src="Assets/Figures/@(chess.GetMoveColor())/Q.png" style="width: 20%"/>
                    <img @onclick="AddR" src="Assets/Figures/@(chess.GetMoveColor())/R.png" style="width: 20%"/>
                    <img @onclick="AddB" src="Assets/Figures/@(chess.GetMoveColor())/B.png" style="width: 20%"/>
                    <img @onclick="AddN" src="Assets/Figures/@(chess.GetMoveColor())/N.png" style="width: 20%"/>
                </div>
            </div>
        }

        @if (chess.Situation == Chess.Situations.CheckMate)
        {
            <div style="position: absolute; top: @(deltaTop+640/2-200/2)px; left: @(deltaLeft+640/2-340/2)px; width:340px; height:200px;  display: block; z-index:99;
            background-color: #b58863; border: 3px solid; border-radius: 10px; border-color: #312e2b; ">
                <p style="font-size: large; color: #312e2b"><h1 style="text-align: center;"><b>Checkmate! </b></h1></p>
                <p style="font-size: large; color: #312e2b; text-align: center;">
                    @if (chess.GetMoveColor() == "white")
                    {
                        <b style="text-align: center;">Blacks Won!</b>
                    }
                    else
                    {
                        <b style="text-align: center;">Whites Won!</b>
                    }
                </p>
                <div style="text-align: center;">
                    <button @onclick="Restart">RESTART</button>
                </div>
            </div>
        }

        <!--FEN "k7/1R1RN3/p3p3/P3P2p/1PP4P/3K1PP1/8/8 b - h3 0 1" - StaleMate-->
        @if (chess.Situation == Chess.Situations.StaleMate || chess.IsDraw())
        {
            <div style="position: absolute; top: @(deltaTop+640/2-160/2)px; left: @(deltaLeft+640/2-340/2)px; width:340px; height:160px;  display: block; z-index:99;
            background-color: #b58863; border: 3px solid; border-radius: 10px; border-color: #312e2b; ">
                <p style="font-size: large; color: #312e2b"><h1 style="text-align: center;"><b>Draw!</b></h1></p>
                <div style="text-align: center;">
                    <button @onclick="Restart">RESTART</button>
                </div>
            </div>
        }
        
        <div class="board-back" style="position: absolute; top: 0px; left: 0px; width: @(""+(deltaLeft+640+deltaTop))px; height: @(""+(deltaLeft+640+deltaTop))px;
        background: #312e2b; background-image: url(Assets/Board.png); background-size: 100%">
        </div>
        <div class="information" style="position: absolute; top: 0px; left: @(""+(deltaLeft+640+deltaTop))px; background: #312e2b; height: @(""+(deltaLeft+640+deltaTop))px; width: 310px">
            <button @onclick="Restart">RESTART</button>
            <button @onclick="Save">SAVE</button>
            <button @onclick="Load">LOAD</button>
            <br>
            <input type="text" @bind="FEN"/>
            <p style="color: #989695; font-size: large; ">Available moves:</p>
            <div class="all-moves" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 12px;">
                @foreach (string move in this.chess.GetAllMoves())
                {
                    <div class="moves" style="font-size:medium; display: block; background: #f1d9b5; width: 64px; height: 40px; text-align: center; border-radius: 5px;">
                        <p style="color: #312e2b; text-align: center; -moz-user-select: none; -webkit-user-select: none; user-select: none;"><b>@move</b></p>
                    </div>
                }
            </div>
        </div>
        @if (chess == null)
        {
            <div class="load">
                <img src="Assets/white.png" width="100%" height="100%"/>
                <object type="image/svg+xml" data="load.svg" width="320" height="320" style="position: fixed; top: 50%; left: 50%; margin-left: -160px; margin-top: -160px;">
                    <p>Loading...</p>
                </object>
            </div>
        }
        else
        {
            <div class="Board" style="position: absolute; top: @("" + deltaTop)px; left: @("" + deltaLeft)px;">
            @for(var y = 7; y >= 0; y--)
            {
                <div class="Line">
                @for(var x = 0; x < 8; x++)
                {
                    <div class="Square" id="@("" + x + y)">
                        <div class="Background" style="position: relative; z-index: 10">
                            <img src="@((x+y)%2 == 0 ? "Assets/white.png" : "Assets/black.png")" draggable="false" @onmouseup="OnMouseUp" />
                        </div>
                        @if(chess.GetFigureAt(x, y) != '.'){
                            <div class="Figure" style="position: absolute; @(GetCoordsInPX(x, y)); z-index: 11">
                                <img src="Assets/Figures/@(chess.GetColor(chess.GetFigureAt(x, y)))/@(chess.GetFigureAt(x, y)).png"
                                draggable="false" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" />
                            </div>
                        }
                    </div>
                }
                </div>
            }
            </div>
        }
    </div>
</div>

@code {
    private int deltaTop = 9;
    private int deltaLeft = 24;

    private Chess? chess;
    private string FEN = "";

    private bool Promotion = false;

    private int X = 0;
    private int Y = 0;

    private string figureMove = "";

    protected override void OnInitialized() {
        chess = new Chess();
        base.OnInitialized();
    }

    private string GetCoordsInPX(int x, int y)
    {
        return "top: " + (7 - y) * 80 + "px; left: " + x * 80 + "px";
    }

    private int GetX(MouseEventArgs e)
    {
        return ((int)Math.Round((e.ClientX - this.deltaLeft) / 80 + 0.5) - 1);
    }

    private int GetY(MouseEventArgs e)
    {
        return 7 - ((int)Math.Round((e.ClientY - this.deltaTop) / 80 + 0.5) - 1);
    }

    private void OnClick(MouseEventArgs e)
    {
        return;
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        this.X = GetX(e);
        this.Y = GetY(e);
        return;
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        int currentX = GetX(e);
        int currentY = GetY(e);
        if (this.X == currentX && this.Y == currentY)
            return;
        Move move = new Move(this.chess, this.X, this.Y, currentX, currentY);
        this.figureMove = move.ToString();
        if ((chess.GetMoveColor() == "white" && chess.GetFigureAt(this.X, this.Y) == 'P' && this.Y == 6) || 
            (chess.GetMoveColor() == "black" && chess.GetFigureAt(this.X, this.Y) == 'p' && this.Y == 1))
        {
            if (Math.Abs(this.X - currentX)  == 1)
            {
                this.Promotion = true;
                return;
            }
        }
        MoveFigure();
        return;
    }

    private void MoveFigure()
    {
        this.Promotion = false;
        chess = this.chess.Move(this.figureMove);
    }

    private class Move{
        public char figure { get; private set; }
        public int fromX { get; private set; }
        public int fromY { get; private set; }
        public int toX { get; private set; }
        public int toY { get; private set; }
        public string promotion = "";

        public Move(Chess chess, int fromX, int fromY, int toX, int toY)
        {
            this.fromX = fromX;
            this.fromY = fromY;
            this.toX = toX;
            this.toY = toY;
            this.figure = chess.GetFigureAt(fromX, fromY);
        }

        public override string ToString()
        {
            return this.figure.ToString() + ((char)(this.fromX + 'a')).ToString() + (this.fromY + 1) + ((char)(this.toX + 'a')).ToString() + (this.toY + 1) + this.promotion;
        }
    }

    private void Restart()
    {
        this.chess = new Chess();
    }

    private void Save()
    {
        this.FEN = this.chess.FEN;
        return;
    }

    private void Load()
    {
        this.chess = new Chess(this.FEN);
        return;
    }

    private void ChangeFEN(string FEN)
    {
        this.FEN = FEN;
        return;
    }

    private void AddQ(){
        this.figureMove += chess.GetMoveColor() == "white" ? "Q" : "q";
        MoveFigure();
        return;
    }

    private void AddR(){
        this.figureMove += chess.GetMoveColor() == "white" ? "R" : "r";
        MoveFigure();
        return;
    }

    private void AddB(){
        this.figureMove += chess.GetMoveColor() == "white" ? "B" : "b";
        MoveFigure();
        return;
    }

    private void AddN(){
        this.figureMove += chess.GetMoveColor() == "white" ? "N" : "n";
        MoveFigure();
        return;
    }
}